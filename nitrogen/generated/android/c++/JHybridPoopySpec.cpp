///
/// JHybridPoopySpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridPoopySpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::TurboScrypt {

  jni::local_ref<JHybridPoopySpec::jhybriddata> JHybridPoopySpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridPoopySpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridPoopySpec::initHybrid),
    });
  }

  size_t JHybridPoopySpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<ArrayBuffer> JHybridPoopySpec::scrypt(const std::shared_ptr<ArrayBuffer>& password, const std::shared_ptr<ArrayBuffer>& salt, double N, double r, double p, double size) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* password */, jni::alias_ref<JArrayBuffer::javaobject> /* salt */, double /* N */, double /* r */, double /* p */, double /* size */)>("scrypt");
    auto __result = method(_javaPart, JArrayBuffer::wrap(password), JArrayBuffer::wrap(salt), N, r, p, size);
    return __result->cthis()->getArrayBuffer();
  }

} // namespace margelo::nitro::TurboScrypt
