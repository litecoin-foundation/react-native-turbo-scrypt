///
/// HybridScryptSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridScryptSpec.hpp"

// Forward declaration of `HybridScryptSpecCxx` to properly resolve imports.
namespace TurboScryptiOS { class HybridScryptSpecCxx; }



#include <string>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "TurboScryptiOS-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::TurboScrypt {

  /**
   * The C++ part of HybridScryptSpecCxx.swift.
   *
   * HybridScryptSpecSwift (C++) accesses HybridScryptSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridScryptSpecCxx can directly inherit from the C++ class HybridScryptSpec
   * to simplify the whole structure and memory management.
   */
  class HybridScryptSpecSwift: public virtual HybridScryptSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridScryptSpecSwift(const TurboScryptiOS::HybridScryptSpecCxx& swiftPart):
      HybridObject(HybridScryptSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline TurboScryptiOS::HybridScryptSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string scrypt(const std::string& password, const std::string& salt, double N, double r, double p, double size) override {
      auto __result = _swiftPart.scrypt(password, salt, std::forward<decltype(N)>(N), std::forward<decltype(r)>(r), std::forward<decltype(p)>(p), std::forward<decltype(size)>(size));
      return __result;
    }

  private:
    TurboScryptiOS::HybridScryptSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::TurboScrypt
